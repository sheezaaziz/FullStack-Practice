{"ast":null,"code":"var _jsxFileName = \"/Users/sheezaaziz/Documents/coding/learning/FullStack-Practice/react-mongoose-graphql/client/src/components/BookList.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { gql, useQuery } from '@apollo/client'; // graphql queries\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOOK_LIST = gql`\n  query getBooksQuery {\n    books {\n      name\n      id\n    }\n  }\n`; // export default function BookList() {\n//   return (\n//     <div>\n//       <ul id=\"book-list\">\n//         <li>book name</li>\n//       </ul>\n//     </div>\n//   )\n// }\n\nexport default function BookList() {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(BOOK_LIST);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 21\n  }, this);\n  return data.map(book => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: book.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this));\n}\n\n_s(BookList, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = BookList;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookList\");","map":{"version":3,"sources":["/Users/sheezaaziz/Documents/coding/learning/FullStack-Practice/react-mongoose-graphql/client/src/components/BookList.js"],"names":["React","gql","useQuery","BOOK_LIST","BookList","loading","error","data","map","book","name"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B,C,CAEA;;;AACA,MAAMC,SAAS,GAAGF,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA,C,CAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASG,QAAT,GAAoB;AAAA;;AACjC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BL,QAAQ,CAACC,SAAD,CAAzC;AAEA,MAAIE,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA,0BAAYA,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,SAAOC,IAAI,CAACC,GAAL,CAAUC,IAAD,iBACd;AAAA,2BACE;AAAA,6BACE;AAAA,kBAAMA,IAAI,CAACC;AAAX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADK,CAAP;AAOD;;GAbuBN,Q;UACWF,Q;;;KADXE,Q","sourcesContent":["import React from 'react';\nimport { gql, useQuery } from '@apollo/client';\n\n// graphql queries\nconst BOOK_LIST = gql`\n  query getBooksQuery {\n    books {\n      name\n      id\n    }\n  }\n`;\n\n\n// export default function BookList() {\n//   return (\n//     <div>\n//       <ul id=\"book-list\">\n//         <li>book name</li>\n//       </ul>\n//     </div>\n//   )\n// }\n\nexport default function BookList() {\n  const { loading, error, data } = useQuery(BOOK_LIST);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: { error }</p>;\n\n  return data.map((book) => (\n    <div>\n      <ul>\n        <li>{ book.name }</li>\n      </ul>\n    </div>\n  ));\n}\n"]},"metadata":{},"sourceType":"module"}