{"ast":null,"code":"var _jsxFileName = \"/Users/sheezaaziz/Documents/coding/learning/FullStack-Practice/graphql/tutorials/modern-graphql-apollo-prisma/social-media-fullstack/client/src/pages/Profile/Profile.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useParams } from \"react-router\";\nimport AddPostModal from \"../../components/AddPostModal/AddPostModal\";\nimport Post from \"../../components/Post/Post\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_PROFILE = gql`\n  query GetProfile($userId: ID!) {\n    profile(userId: $userId) {\n      bio \n      isMyProfile\n      {\n        user {\n          id\n          name\n          posts {\n            id\n            title\n            content\n            createdAt\n            published\n          }\n        }\n      }\n    }\n  }\n`;\nexport default function Profile() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(GET_PROFILE, {\n    variables: {\n      userId: id\n    }\n  });\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"error\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 21\n  }, this);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"spinner\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 23\n  }, this);\n  const {\n    profile\n  } = data;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"2rem\",\n        display: \"flex \",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: profile.user.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: profile.bio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: profile.isMyProfile ? /*#__PURE__*/_jsxDEV(AddPostModal, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 37\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: profile.user.posts.map(post => {\n        return /*#__PURE__*/_jsxDEV(Post, {\n          title: post.title,\n          content: post.content,\n          date: post.createdAt,\n          id: post.id,\n          user: post.user.name\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Profile, \"NJ4mHzrs5oNVJvGQMnCfegDud9c=\", false, function () {\n  return [useParams, useQuery];\n});\n\n_c = Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["/Users/sheezaaziz/Documents/coding/learning/FullStack-Practice/graphql/tutorials/modern-graphql-apollo-prisma/social-media-fullstack/client/src/pages/Profile/Profile.js"],"names":["React","useParams","AddPostModal","Post","gql","useQuery","GET_PROFILE","Profile","id","data","error","loading","variables","userId","profile","marginBottom","display","justifyContent","user","name","bio","isMyProfile","posts","map","post","title","content","createdAt"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,YAAP,MAAyB,4CAAzB;AACA,OAAOC,IAAP,MAAiB,4BAAjB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;;AAEA,MAAMC,WAAW,GAAGF,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApBA;AAsBA,eAAe,SAASG,OAAT,GAAmB;AAAA;;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAASP,SAAS,EAAxB;AACA,QAAM;AAAEQ,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2BN,QAAQ,CAACC,WAAD,EAAc;AACrDM,IAAAA,SAAS,EAAE;AACTC,MAAAA,MAAM,EAAEL;AADC;AAD0C,GAAd,CAAzC;AAMA,MAAIE,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,MAAIC,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEb,QAAM;AAAEG,IAAAA;AAAF,MAAcL,IAApB;AAEA,sBACE;AAAA,4BACE;AACE,MAAA,KAAK,EAAE;AACLM,QAAAA,YAAY,EAAE,MADT;AAELC,QAAAA,OAAO,EAAE,OAFJ;AAGLC,QAAAA,cAAc,EAAE;AAHX,OADT;AAAA,8BAOE;AAAA,gCACE;AAAA,oBAAKH,OAAO,CAACI,IAAR,CAAaC;AAAlB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAIL,OAAO,CAACM;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,eAWE;AAAA,kBAAMN,OAAO,CAACO,WAAR,gBAAsB,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,gBAAtB,GAAyC;AAA/C;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAcE;AAAA,gBACGP,OAAO,CAACI,IAAR,CAAaI,KAAb,CAAmBC,GAAnB,CAAuBC,IAAI,IAAI;AAC9B,4BACE,QAAC,IAAD;AAEE,UAAA,KAAK,EAAEA,IAAI,CAACC,KAFd;AAGE,UAAA,OAAO,EAAED,IAAI,CAACE,OAHhB;AAIE,UAAA,IAAI,EAAEF,IAAI,CAACG,SAJb;AAKE,UAAA,EAAE,EAAEH,IAAI,CAAChB,EALX;AAME,UAAA,IAAI,EAAEgB,IAAI,CAACN,IAAL,CAAUC;AANlB,WACOK,IAAI,CAAChB,EADZ;AAAA;AAAA;AAAA;AAAA,gBADF;AAUD,OAXA;AADH;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD;;GA5CuBD,O;UACPN,S,EACkBI,Q;;;KAFXE,O","sourcesContent":["import React from \"react\";\nimport { useParams } from \"react-router\";\nimport AddPostModal from \"../../components/AddPostModal/AddPostModal\";\nimport Post from \"../../components/Post/Post\";\nimport { gql, useQuery } from \"@apollo/client\";\n\nconst GET_PROFILE = gql`\n  query GetProfile($userId: ID!) {\n    profile(userId: $userId) {\n      bio \n      isMyProfile\n      {\n        user {\n          id\n          name\n          posts {\n            id\n            title\n            content\n            createdAt\n            published\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function Profile() {\n  const { id } = useParams();\n  const { data, error, loading } = useQuery(GET_PROFILE, {\n    variables: {\n      userId: id\n    }\n  });\n\n  if (error) return <p>error</p>\n  if (loading) return <p>spinner</p>\n\n  const { profile } = data;\n\n  return (\n    <div>\n      <div\n        style={{\n          marginBottom: \"2rem\",\n          display: \"flex \",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <div>\n          <h1>{profile.user.name}</h1>\n          <p>{profile.bio}</p>\n        </div>\n        <div>{profile.isMyProfile ? <AddPostModal /> : null}</div>\n      </div>\n      <div>\n        {profile.user.posts.map(post => {\n          return (\n            <Post\n              key={post.id}\n              title={post.title}\n              content={post.content}\n              date={post.createdAt}\n              id={post.id}\n              user={post.user.name}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}